head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2010.12.08.15.03.43;	author eanh;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.06.05.07.10;	author eanh;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.06.04.44.55;	author eanh;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.06.00.58.04;	author eanh;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.21.54.52;	author eanh;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.19.56.54;	author eanh;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.05.18.59.37;	author eanh;	state Exp;
branches;
next	;


desc
@..
ls
@


1.7
log
@*** empty log message ***
@
text
@// Ean Hernandez 12-08-2010 HW9
#include <stdio.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <errno.h>
int checkSpelling(char*s);
void error(char *msg);
void *doThread(void *fp);
int main(int argc, char *argv[])
{
     // checking input
     if (argc < 2) {fprintf(stderr,"ERROR, no port provided\n"); exit(1);}

     // setting up variables
     int sockfd, portno, newsockfd;
     struct sockaddr_in serv_addr;
     int *fdptr;
     pthread_attr_t *attr;
     pthread_t worker;

     // creating socket
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0) { error("ERROR opening socket");}

     // setting up struct for socket call
     bzero((char *) &serv_addr, sizeof(serv_addr));
     portno = atoi(argv[1]);
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_addr.s_addr = INADDR_ANY;
     serv_addr.sin_port = htons(portno);

     //setting up thread attributes
     attr=(pthread_attr_t*)malloc(sizeof(pthread_attr_t));
     pthread_attr_init(attr);
     pthread_attr_setdetachstate(attr,PTHREAD_CREATE_DETACHED);

     // binding
     if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) 
     {
         error("ERROR on binding");
     }

     // listening
     listen(sockfd,5);
     printf("ready to spell check.\n");
     while(1)
     {
        newsockfd = accept(sockfd, NULL, NULL);
        if (newsockfd < 0) {error("ERROR on accept");}
        printf("received connection, spawning thread...\n");
        fdptr = malloc(sizeof(int));
        *fdptr = newsockfd;
        pthread_create(&worker,attr,doThread,fdptr);
     }
     return 0; 
}

void *doThread(void *fdptr)
{    
        int n,fd;
        char buffer[256];
        char tmp[255];           // stores the word for sending back to the client
        char* p;                 // used to find and kill trailing \n
        char returnText[256];    // full text to return to client
        int keepGoing = 1; 
        fd = *(int*)fdptr;
        free(fdptr);

        while(keepGoing==1)
        {
          memset(buffer,0,256);
          n = read(fd,buffer,255);      // waiting for data from client
          strcpy(tmp, buffer);                 // getting a copy of the word
          p = strchr(tmp,'\n');                //   
          if (p) {*p = '\0';}                  // clean out \n

          if (n < 0){error("ERROR reading from socket"); }
          if (strcmp(tmp,"quit")==0){ keepGoing = 0; } 

          printf("received word to spellcheck: %s",buffer);
          // return based on spell check result
          if (checkSpelling(buffer) == 1)
          {
              printf("Correct spelling, notifying client.\n");
              sprintf(returnText, "The word %s is spelled correctly.",tmp);
          }
          else
          {
              printf("Incorrect spelling, notifying client.\n");
              sprintf(returnText, "The word %s is spelled incorrectly.",tmp);
          }

          n = write(fd,returnText,strlen(returnText));    // send message to client
          if (n < 0) {error("ERROR writing to socket");}
        }
        
        printf("received quit signal, terminating thread.\n");
        fflush(stdout);
        return NULL;                                     //no idea why gcc makes me do this
}

// checks spelling file for s
int checkSpelling(char*s)
{
   FILE *fp=fopen("/usr/share/dict/words","r");
   char tmp[256];
   while(fp!=NULL && fgets(tmp, sizeof(tmp), fp)!=NULL)
   {
      if (strcmp(tmp, s)==0){ return 1;}
   }
   return 0;
   fclose(fp);
}

// error messages
void error(char *msg)
{
    perror(msg);
    exit(1);
}

@


1.6
log
@final cleanup
@
text
@d1 1
a1 1
// Ean Hernandez 12-01-2010 HW9
@


1.5
log
@working version, tested
@
text
@d20 2
a21 3
     int sockfd, portno;
     socklen_t clilen;
     struct sockaddr_in serv_addr, cli_addr;
a24 1
     int newsockfd;
d36 2
d50 1
a50 2
     clilen = sizeof(cli_addr);
     printf("hi\n");
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
// Ean Hernandez 12-01-2010 HW8
d9 2
d13 1
a13 1

d16 3
d20 1
a20 1
     int sockfd, newsockfd, portno;
a21 1
     char buffer[256];
d23 4
a26 4
     int n;

     // checking input
     if (argc < 2) {fprintf(stderr,"ERROR, no port provided\n"); exit(1);}
d38 3
d51 2
a52 15

     // get socket file descriptor
     newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
     if (newsockfd < 0) {error("ERROR on accept");}

     bzero(buffer,256);

     // setting up variables 
     int keepRunning = 1;     // controls wait loop
     char tmp[255];           // stores the word for sending back to the client
     char* p;                 // used to find and kill trailing \n
     char returnText[256];    // full text to return to client

     // runs until the client sends "quit"
     while(keepRunning == 1)
d54 9
a62 5
        memset(buffer,0,256);
        n = read(newsockfd,buffer,255);      // waiting for data from client
        strcpy(tmp, buffer);                 // getting a copy of the word
        p = strchr(tmp,'\n');                //   
        if (p) {*p = '\0';}                  // clean out \n
d64 10
a73 2
        if (n < 0) error("ERROR reading from socket");
        printf("Here is the message: %s",buffer);
d75 1
a75 2
        // return based on spell check result
        if (checkSpelling(buffer) == 1)
d77 24
a100 5
            sprintf(returnText, "The word %s is spelled correctly.",tmp);
        }
        else
        {
            sprintf(returnText, "The word %s is spelled incorrectly.",tmp);
d102 4
a105 8


        n = write(newsockfd,returnText,strlen(returnText));    // send message to client
        if (n < 0) error("ERROR writing to socket");
        if (strcmp(buffer,"quit\n")==0) {keepRunning = 0;}     // quit if we are done
     }
     printf("bye.\n");
     return 0; 
@


1.3
log
@*** empty log message ***
@
text
@a8 2
#include <pthread.h>
#include <dirent.h>
a56 5
     pthread_attr_t attr;
     pthread_attr_init(attr);
     pthread_attr_setdetachstate(attr,PTHREAD_CREATE_DETACHED);


a69 1

a107 1

@


1.2
log
@fixed cr issue
@
text
@d9 2
d59 5
d77 1
@


1.1
log
@Initial revision
@
text
@d60 1
@
