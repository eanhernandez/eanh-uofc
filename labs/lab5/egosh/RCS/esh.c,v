head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2010.11.10.21.29.09;	author eanh;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.06.12.25.12;	author eanh;	state Exp;
branches;
next	1.2;

1.2
date	2010.11.05.20.12.27;	author eanh;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.05.01.41.12;	author eanh;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

int simple_fork_command(char** a);
void get_input(char* foo, char** args);
int parse_input(char* foo, char** args);
void printcmdrun(int i);
char*line="-----------------------";
int main() 
{
   char* args[80];
   char foo[80];
   char foo_copy[80];
   int exitstatus; 
   char* cwd;
   char*to;
   int p_i=0;
   while(1) 
   {
      printf("esh> ");
      fgets (foo, sizeof(foo), stdin);
      strcpy(foo_copy,foo);
      get_input(foo_copy,args);
      p_i=parse_input(foo,args);
      exitstatus = 0;

      switch(p_i)
      {
        case 1: //quitting
            printf("bye!\n"); exit(0); break;
        case 2: //erroneous cr
            break;
        case 3: //cd
            printf("Running Command\n%s\n",line);
            exitstatus = chdir(args[1]);
            printf("Change Dir:");
            if (exitstatus == 0){printf("success\n");}else{printf("failed!\n");}
            break;
        case 4: //pwd
            printf("Running Command\n%s\n",line);
            cwd = get_current_dir_name();
            printf("%s\n",cwd);
            break;
        case 5: //set env
            printf("Running Command\n%s\n",line);
            printf("setenv returns: %d\n",setenv(args[0],args[1],1));
            break;
        case 6: //get env
            printf("Running Command\n%s\n",line);
            to = malloc(strlen(args[1]));                //remember to free this
            strncpy(to, args[1]+1, strlen(args[1]));
            printf("%s = %s\n",args[1],getenv(to));
            break;
        default: //execute a command in child
            printf("Running Command\n%s\n",line);
            exitstatus = simple_fork_command(args);
            printf("%s\nCommand Returned Exit Code %d\n",line,exitstatus);
       }
       printf("%s\n",line);
    }
}

int parse_input(char*f, char**a)
{     
   char* p = strchr(f,'\n');
   if (p) {*p='\0';}

   if (f[0]=='\0'){return 2;}                            // errant CR   = 2
   if (strcmp(a[0],"exit")==0){return 1;}                // quitting    = 1
   if (strcmp(a[0],"cd")==0){return 3;}                  // change dir  = 3
   if (strcmp(a[0],"pwd")==0){return 4;}                 // pwd request = 4
   if (strchr(f,'=')){return 5;}                         // =sign,setenv= 5
   if (strchr(f,'$')){return 6;}                         // $, get env  = 6
   return 999;                                           // command     = 999
}

void get_input(char* foo, char** args)
{

      char* p = strchr(foo,'\n');
      char* splitter = " =";
      if (p) {*p='\0';}
      if (strchr(foo,'\'')){splitter="=";}
      int i=0;
      char*token[80];
      token[0]=strtok(foo,splitter);
      args[0]=token[0];

      while(token[i] != NULL)
      {
         i++;
         token[i]=strtok(NULL,splitter);
         args[i]=token[i];
      }
}
int simple_fork_command(char** f)
{
      int pid;
      int exitstatus;
      pid = fork();
      
      if (pid == 0)
      {
            printf("return val child: %d\n",execvp(f[0],f));
            fflush(stdout);
      }
      else
        {
            wait(&exitstatus);
            fflush(stdout);
         }
   return(exitstatus);
}
@


1.3
log
@*** empty log message ***
@
text
@a3 4
//#include <signal.h>
//#include <sys/types.h>
//#include <sys/time.h>
//#include <sys/stat.h>
a4 2
//#include <dirent.h>
//#include <errno.h>
a5 1
//#include <fcntl.h>
a6 1
//#include <stddef.h>
a28 1
      printf("Running Command\n%s\n",line);
d38 1
d44 1
d49 1
d53 1
d59 1
@


1.2
log
@step 4 working.
@
text
@d19 2
a20 1

d26 1
a26 1
 
d37 3
a39 1
      printf("parse input returns: %d\n",p_i);
d42 1
a42 1
         case 1:
d44 6
a49 5
         case 2:
            printf("no!\n"); break;
         case 3:
            printf("changing directories to %s\n", args[1]);
            printf("change returned:%d\n",chdir(args[1]));
d51 1
a51 1
         case 4:
d53 1
a53 1
            printf("you are at: %s\n",cwd);
d55 1
a55 2
        case 5:
            printf("set env var case\n");
d58 2
a59 3
         case 6:
            printf("get env var case\n");
            to = malloc(strlen(args[1]));
a60 1
            printf("trying to getenv on:%s\n",to);
d63 3
a65 2
         default:
            simple_fork_command(args);          
d67 1
a75 2
   printf("parse_input f received: (%s)\n",f);
   printf("parse_input arg[0] received: (%s)\n",a[0]);
d89 1
d91 1
a91 2
 
      printf("get_input received: %s\n",foo);
d94 1
a94 1
      token[0]=strtok(foo," =");
d100 1
a100 1
         token[i]=strtok(NULL," ");
a103 1

d109 1
a109 1

a117 1
            printf("child exited: %d\n", exitstatus);
d120 1
a120 1
   return(0);
@


1.1
log
@Initial revision
@
text
@d18 1
d24 5
a28 1

d33 5
a37 4

      if (strcmp(foo,"exit\n")==0){printf("bye!\n"); exit(0);}
      if (strcmp(foo,"\n")==0){printf("no!\n");}
      else
d39 5
a43 4
         get_input(foo,args);

         if (strcmp(args[0],"cd")==0)        
         {
d46 3
a48 4
         }
         else if (strcmp(args[0],"pwd")==0)
         {
            char*cwd = get_current_dir_name();
d50 13
a62 3
         }
         else
         { 
d64 18
a81 3
         }
      }
   }
d83 1
d86 1
d89 2
a90 1

d93 1
a93 1
      token[0]=strtok(foo," ");
@
